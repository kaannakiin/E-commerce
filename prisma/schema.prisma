// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String             @id @default(cuid())
  name             String?
  surname          String?
  phone            String?
  role             Role               @default(USER)
  email            String             @unique
  password         String
  emailVerified    Boolean            @default(false)
  image            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  Adress           Address[]
  Order            Order[]
  FavoriteVariants FavoriteVariants[]
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

enum VariantType {
  COLOR
  SIZE
  WEIGHT
}

model Product {
  id               String     @id @default(uuid())
  name             String
  description      String
  shortDescription String
  categories       Category[] @relation("ProductCategory") // Değişiklik burada
  taxRate          Float      @default(18)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  Variant          Variant[]
}

model Variant {
  id                  String             @id @default(uuid())
  type                VariantType
  value               String
  unit                String? // only for weight
  price               Float
  slug                String             @unique
  discount            Float              @default(0)
  isPublished         Boolean            @default(false)
  stock               Int                @default(0)
  product             Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId           String
  isSpotlightFeatured Boolean            @default(false)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  Image               Image[]
  discountCodes       DiscountCode[]
  OrderItems          OrderItems[]
  FavoriteVariants    FavoriteVariants[]

  @@index([productId])
}

model Image {
  id              String            @id @default(uuid())
  url             String            @unique
  alt             String?
  variantId       String?
  variant         Variant?          @relation(fields: [variantId], references: [id], onDelete: Cascade)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  categoryId      String?
  category        Category?         @relation(fields: [categoryId], references: [id])
  MainHeroSection MainHeroSection[]

  @@index([variantId])
  @@index([categoryId])
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  slug        String    @unique
  active      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[] @relation("ProductCategory")
  Image       Image[]
}

model MainHeroSection {
  id          String   @id @default(uuid())
  title       String
  text        String
  buttonTitle String
  buttonLink  String
  image       Image    @relation(fields: [imageId], references: [id])
  imageId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([imageId])
}

model DiscountCode {
  id             String       @id @default(cuid())
  code           String       @unique
  discountAmount Int
  discountType   DiscountType
  uses           Int          @default(0)
  active         Boolean      @default(true)
  allProducts    Boolean      @default(false)
  createdAt      DateTime     @default(now())
  limit          Int?
  expiresAt      DateTime?
  variants       Variant[]
  //order add here
  Order          Order[]
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

model TempPayment {
  id                String    @id @default(cuid())
  token             String    @unique
  paymentId         String?   @unique
  basketId          String    @unique
  paidPrice         Float
  currency          String    @default("TRY")
  discountCode      String?
  discountCodePrice Float?
  createdAt         DateTime  @default(now())
  addressId         String?   @unique
  expiresAt         DateTime?
  address           Address?  @relation(fields: [addressId], references: [id])
}

model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique
  paymentId       String        @unique
  basketId        String        @unique
  paidPrice       Float
  currency        String        @default("TRY")
  addressId       String
  address         Address       @relation(fields: [addressId], references: [id])
  orderItems      OrderItems[]
  orderStatus     OrderStatus   @default(PENDING)
  user            User?         @relation(fields: [userId], references: [id])
  userId          String?
  discountCode    DiscountCode? @relation(fields: [discountCodeId], references: [id])
  discountCodeId  String?
  createdAt       DateTime      @default(now()) @db.Date
  paidPriceIyzico Float? // burada iyzico tarafından ödenilecek tutar gelecek  merchantPayoutAmount değerinden alınacak
  ip              String? // burada buyer ip gelecek
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItems {
  id         String  @id @default(cuid())
  basketId   String
  variantId  String
  variant    Variant @relation(fields: [variantId], references: [id])
  quantity   Int
  price      Float
  totalPrice Float
  currency   String  @default("TRY")
  order      Order   @relation(fields: [basketId], references: [basketId])
}

model Address {
  id            String  @id @default(cuid())
  name          String
  surname       String?
  email         String?
  phone         String
  city          String
  district      String
  addressDetail String
  addressTitle  String?

  tempPayment   TempPayment?
  tempPaymentId String?
  user          User?        @relation(fields: [userId], references: [id])
  userId        String?
  isDeleted     Boolean      @default(false)
  deletedAt     DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Order         Order[]
}

model FavoriteVariants {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  variant   Variant   @relation(fields: [variantId], references: [id])
  variantId String
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  @@unique([userId, variantId])
  @@index([userId])
  @@index([variantId])
}
