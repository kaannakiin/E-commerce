// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model SalerInfo {
  id               String  @id @default(cuid())
  storeName        String // Mağaza adı
  storeDescription String?
  address          String?

  //logo
  logoId String? @unique // Sadece bir logo olabilmesi için @unique
  logo   Image?  @relation(fields: [logoId], references: [id])

  contactEmail String
  contactPhone String

  seoTitle       String?
  seoDescription String?
  instagram      String?
  pinterest      String?
  facebook       String?
  whatsapp       String?
  twitter        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                      String                    @id @default(cuid())
  name                    String?
  surname                 String?
  phone                   String?
  role                    Role                      @default(USER)
  email                   String                    @unique
  password                String
  emailVerified           Boolean                   @default(false)
  image                   String?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  Adress                  Address[]
  Order                   Order[]
  FavoriteVariants        FavoriteVariants[]
  refundOrderItemsRequest refundOrderItemsRequest[]
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

enum VariantType {
  COLOR
  SIZE
  WEIGHT
}

model Product {
  id               String     @id @default(uuid())
  name             String
  description      String
  shortDescription String
  categories       Category[] @relation("ProductCategory") // Değişiklik burada
  taxRate          Float      @default(18)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  Variant          Variant[]
}

model Variant {
  id                  String             @id @default(uuid())
  type                VariantType
  value               String
  unit                String? // only for weight
  price               Float
  slug                String             @unique
  discount            Float              @default(0)
  isPublished         Boolean            @default(false)
  stock               Int                @default(0)
  product             Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId           String
  isSpotlightFeatured Boolean            @default(false)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  Image               Image[]
  discountCodes       DiscountCode[]
  OrderItems          OrderItems[]
  FavoriteVariants    FavoriteVariants[]

  seoTitle       String? // Variant'a özel SEO başlığı
  seoDescription String? // Variant'a özel SEO açıklaması
  metaKeywords   String? // SEO anahtar kelimeleri
  canonicalUrl   String? // Canonical URL

  @@index([productId])
  @@index([slug])
}

model Image {
  id              String            @id @default(uuid())
  url             String            @unique
  alt             String?
  variantId       String?
  variant         Variant?          @relation(fields: [variantId], references: [id], onDelete: Cascade)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  categoryId      String?
  category        Category?         @relation(fields: [categoryId], references: [id])
  MainHeroSection MainHeroSection[]
  SalerInfo       SalerInfo?

  @@index([variantId])
  @@index([categoryId])
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  slug        String    @unique
  active      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[] @relation("ProductCategory")
  Image       Image[]
}

enum AssetType {
  IMAGE
  VIDEO
}

model MainHeroSection {
  id              String    @id @default(uuid())
  isFunctionality Boolean   @default(false)
  alt             String
  title           String?
  text            String?
  buttonTitle     String?
  buttonLink      String?
  image           Image     @relation(fields: [imageId], references: [id])
  imageId         String    @unique
  type            AssetType
  isPublished     Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([imageId])
}

model DiscountCode {
  id             String       @id @default(cuid())
  code           String       @unique
  discountAmount Int
  discountType   DiscountType
  uses           Int          @default(0)
  active         Boolean      @default(true)
  allProducts    Boolean      @default(false)
  createdAt      DateTime     @default(now())
  limit          Int?
  expiresAt      DateTime?
  variants       Variant[]
  //order add here
  Order          Order[]
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

model TempPayment {
  id                String    @id @default(cuid())
  token             String    @unique
  paymentId         String?   @unique
  paidPrice         String
  basketId          String    @unique
  addressId         String?
  ip                String?
  userId            String?
  currency          String    @default("TRY")
  discountCode      String?
  discountCodePrice Float?
  createdAt         DateTime  @default(now())
  expiresAt         DateTime?
}

model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique
  paymentId       String        @unique
  paidPrice       Float
  currency        String        @default("TRY")
  addressId       String
  address         Address       @relation(fields: [addressId], references: [id])
  orderItems      OrderItems[]
  orderStatus     OrderStatus   @default(PENDING)
  paymentStatus   paymentStatus @default(PENDING)
  trackingNumber  String? // Kargo takip numarası
  shippingCompany String? // Kargo firması  
  deliveredDate   DateTime? // Teslim tarihi
  cancelReason    String? // İptal nedeni
  cancelledAt     DateTime? // İptal tarihi
  user            User?         @relation(fields: [userId], references: [id])
  userId          String?
  discountCode    DiscountCode? @relation(fields: [discountCodeId], references: [id])
  discountCodeId  String?
  paymentDate     DateTime?
  paidPriceIyzico Float?
  ip              String?       @db.VarChar(45)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum paymentStatus {
  PENDING // Ödeme başlatıldı, sonuç bekleniyor
  SUCCESS // Ödeme başarıyla tamamlandı
  FAILED // Ödeme başarısız (yetersiz bakiye, kart hatası vb.)
  REFUNDED // Kullanıcı veya sistem tarafından iptal edildi
}

enum OrderStatus {
  AWAITING_APPROVAL //  Sipariş onay bekliyor (stok kontrolü vb.)
  PENDING // Ödeme alındı, işlem başlatılacak
  PROCESSING //  Sipariş hazırlanıyor
  SHIPPED // Kargoya verildi
  DELIVERED // Teslim edildi
  CANCELLED // İptal edildi (iade, kullanıcı isteği vb.)
}

model OrderItems {
  id                      String                   @id @default(cuid())
  variantId               String
  variant                 Variant                  @relation(fields: [variantId], references: [id])
  quantity                Int
  price                   Float
  paidPrice               Float // price - discount
  totalPrice              Float // paidPrice * quantity
  iyzicoPerPrice          Float? // iyzico tarafından ödenilecek tutar
  iyzicoPerTotal          Float? // iyzico tarafından ödenilecek tutar
  currency                String                   @default("TRY")
  refunded                Boolean                  @default(false)
  refundDate              DateTime?
  orderId                 String
  order                   Order                    @relation(fields: [orderId], references: [id])
  createdAt               DateTime                 @default(now())
  refundOrderItemsRequest refundOrderItemsRequest?
}

enum RefundRequestStatus {
  PENDING // İnceleme bekliyor
  APPROVED // Onaylandı
  REJECTED // Reddedildi
  CANCELLED // Müşteri iptal etti
}

model refundOrderItemsRequest {
  id          String              @id @default(cuid())
  orderItemId String              @unique
  orderItem   OrderItems          @relation(fields: [orderItemId], references: [id])
  status      RefundRequestStatus @default(PENDING)
  reason      String // İade nedeni (RETURN_REASONS'dan seçilen)
  description String // Müşteri açıklaması
  adminNote   String? // Admin notu
  reviewedAt  DateTime?

  refundAmount    Float? // İade edilecek tutar
  refundedAt      DateTime? // İade tarihi
  refundReference String? // Ödeme sistemi referans no
  reviewedBy      String? // İnceleyen admin ID
  reviewer        User?     @relation(fields: [reviewedBy], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id            String  @id @default(cuid())
  name          String
  surname       String?
  email         String?
  phone         String
  city          String
  district      String
  addressDetail String
  addressTitle  String?

  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Order     Order[]
}

model FavoriteVariants {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  variant   Variant   @relation(fields: [variantId], references: [id])
  variantId String
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  @@unique([userId, variantId])
  @@index([userId])
  @@index([variantId])
}
