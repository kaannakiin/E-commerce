datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model SalerInfo {
  id               String  @id @default(cuid())
  storeName        String // Mağaza adı
  storeDescription String?
  address          String?

  logoId String? @unique // Sadece bir logo olabilmesi için @unique
  logo   Image?  @relation(fields: [logoId], references: [id])

  contactEmail String
  contactPhone String

  seoTitle       String?
  seoDescription String?
  instagram      String?
  pinterest      String?
  facebook       String?
  whatsapp       String?
  twitter        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id               String             @id @default(cuid())
  name             String?
  surname          String?
  phone            String?
  role             Role               @default(USER)
  email            String             @unique
  password         String
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  Adress           Address[]
  FavoriteVariants FavoriteVariants[]
  Order            Order[]
  passwordReset    PasswordReset?
}

model AltSectionImage {
  id      String  @id @default(cuid())
  image   Image?  @relation(fields: [imageId], references: [id])
  imageId String? @unique // @unique ile tek image garantilenir
  title   String
  text    String
  color   String

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CustomMarquee {
  id           String   @id @default(cuid())
  text         String?
  textColor    String?
  textPadding  String?
  bgColor      String?
  fontSize     String?
  SlidingSpeed String?
  isActive     Boolean  @default(true)
  url          String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  used      Boolean  @default(false)

  @@index([token])
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

enum VariantType {
  COLOR
  SIZE
  WEIGHT
}

enum ProductType {
  PHYSICAL
  DIGITAL
}

model Product {
  id               String          @id @default(uuid())
  name             String
  description      String
  active           Boolean         @default(true)
  shortDescription String
  type             ProductType     @default(PHYSICAL)
  categories       Category[]      @relation("ProductCategory")
  taxRate          Float           @default(18)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  Variant          Variant[]
  GoogleCategory   GoogleCategory? @relation(fields: [googleCategoryId], references: [id])
  googleCategoryId Int?

  @@index([googleCategoryId])
}

model GoogleCategory {
  id         Int              @id
  name       String // Kategori adı (örn: "Bebek Bezi Çantaları")
  fullPath   String // Tam kategori yolu (örn: "Giyim & Aksesuar > Çantalar > Bebek Bezi Çantaları")
  parentPath String // Üst kategorilerin yolu (örn: "Giyim & Aksesuar > Çantalar")
  level      Int // Kategori seviyesi (1,2,3 gibi)
  isLeaf     Boolean // En alt kategori mi?
  parentId   Int? // Üst kategori ID'si
  parent     GoogleCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children   GoogleCategory[] @relation("CategoryHierarchy")
  products   Product[]

  metaTitle       String? // SEO başlığı
  metaDescription String? // SEO açıklaması
  breadcrumbs     String[] // ["Giyim & Aksesuar", "Çantalar", "Bebek Bezi Çantaları"]

  // Schema.org için
  schemaType String @default("Product") // Schema.org type

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Category  Category[]

  @@index([parentId])
  @@index([level])
  @@index([isLeaf])
}

model Variant {
  id                  String             @id @default(uuid())
  type                VariantType
  value               String
  unit                String? // only for weight
  price               Float
  softDelete          Boolean            @default(false)
  richTextDescription String?            @db.Text
  slug                String             @unique
  discount            Float              @default(0)
  isPublished         Boolean            @default(false)
  stock               Int                @default(0)
  product             Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId           String
  isSpotlightFeatured Boolean            @default(false)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  Image               Image[]
  discountCodes       DiscountCode[]
  FavoriteVariants    FavoriteVariants[]

  seoTitle       String? // Variant'a özel SEO başlığı
  seoDescription String? // Variant'a özel SEO açıklaması
  canonicalUrl   String? // Canonical URL
  OrderItems     OrderItems[]

  @@index([productId])
  @@index([slug])
}

model Image {
  id                String            @id @default(uuid())
  url               String            @unique
  alt               String?
  variantId         String?
  variant           Variant?          @relation(fields: [variantId], references: [id], onDelete: Cascade)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  categoryId        String?
  category          Category?         @relation(fields: [categoryId], references: [id])
  MainHeroSection   MainHeroSection[]
  SalerInfo         SalerInfo?
  MainSeoSettings   MainSeoSettings?  @relation(fields: [mainSeoSettingsId], references: [id])
  mainSeoSettingsId String?
  mainSeoImage      MainSeoSettings?  @relation("MainImage")
  mainSeoFavicon    MainSeoSettings?  @relation("Favicon")
  AltSectionImage   AltSectionImage[]
  Blog              Blog?
  FaqSection        FaqSection?

  @@index([variantId])
  @@index([categoryId])
}

model Category {
  id          String  @id @default(uuid())
  name        String
  description String?
  slug        String  @unique
  active      Boolean @default(false)

  products         Product[]       @relation("ProductCategory")
  images           Image[] // Image -> images (çoğul olarak düzeltildi)
  googleCategory   GoogleCategory? @relation(fields: [googleCategoryId], references: [id])
  metaTitle        String?
  metaDescription  String?
  metaKeywords     String?         @db.Text //eklenebilir uzun metinler için
  googleCategoryId Int?
  JSONLD           Json? // jsonld olarak küçük harfle yazılması önerilir
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@index([googleCategoryId])
  @@index([active])
}

enum AssetType {
  IMAGE
  VIDEO
}

model MainSeoSettings {
  id                  String  @id @default(cuid())
  image               Image?  @relation("MainImage", fields: [imageId], references: [id])
  imageId             String? @unique
  favicon             Image?  @relation("Favicon", fields: [faviconId], references: [id])
  faviconId           String? @unique
  googleId            String? //for google-analytics 
  googleVerification  String? // Google site doğrulama kodu için yeni alan
  title               String
  description         String
  themeColor          String
  themeColorSecondary String?
  Image               Image[]
}

model MainHeroSection {
  id              String    @id @default(uuid())
  isFunctionality Boolean   @default(false)
  alt             String
  title           String?
  text            String?
  buttonTitle     String?
  buttonLink      String?
  image           Image     @relation(fields: [imageId], references: [id])
  imageId         String    @unique
  type            AssetType
  isPublished     Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([imageId])
}

model DiscountCode {
  id             String       @id @default(cuid())
  code           String       @unique
  discountAmount Int
  discountType   DiscountType
  uses           Int          @default(0)
  active         Boolean      @default(true)
  allProducts    Boolean      @default(false)
  createdAt      DateTime     @default(now())
  limit          Int?
  expiresAt      DateTime?
  variants       Variant[]
  Order          Order[]
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

model Address {
  id            String  @id @default(cuid())
  name          String
  surname       String?
  email         String?
  phone         String
  city          String
  district      String
  addressDetail String
  addressTitle  String?

  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  temporary Boolean   @default(false)
  expiresAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUND
}

enum UserCancelReason {
  WRONG_ADDRESS // Teslimat adresi hatalı
  CHANGED_MIND // Fikir değişikliği
  FOUND_BETTER_PRICE // Daha uygun fiyat buldum
  ACCIDENTAL_ORDER // Yanlışlıkla sipariş verildi
  DELIVERY_TIME_LONG // Teslimat süresi çok uzun
  PAYMENT_CHANGE // Ödeme yöntemini değiştirmek istiyorum
  ITEM_FEATURES // Ürün özellikleri beklediğim gibi değil
  QUANTITY_CHANGE // Adet değişikliği yapmak istiyorum
  PERSONAL_REASON // Kişisel nedenler
  OTHER // Diğer
}

enum AdminCancelReason {
  STOCK_PROBLEM // Stok problemi nedeniyle iptal
  PRICE_ERROR // Fiyat hatası nedeniyle iptal
  DUPLICATE_ORDER // Mükerrer sipariş nedeniyle iptal
  DELIVERY_AREA // Teslimat bölgesi dışında olduğu için iptal
  PAYMENT_ISSUE // Ödeme ile ilgili sorun nedeniyle iptal
  VARIANT_UNAVAILABLE // Seçilen varyant artık mevcut değil
  SYSTEM_ERROR // Sistem hatası nedeniyle iptal
  SELLER_REQUEST // Satıcı tarafından iptal talebi
  FRAUD_SUSPICION // Şüpheli işlem nedeniyle iptal
  ADDRESS_VERIFICATION // Adres doğrulaması yapılamadı
  CUSTOMER_VERIFICATION // Müşteri doğrulaması yapılamadı
  LOGISTICS_ISSUE // Lojistik sorunlar
  OTHER // Diğer nedenler
}

enum PaymentType {
  BANK_TRANSFER
  IYZICO
  TAMI
}

model Order {
  id                String            @id @default(cuid())
  orderNumber       String            @unique
  paymentId         String            @unique
  status            OrderStatus       @default(PENDING)
  paymentStatus     PaymentStatus     @default(PENDING)
  paymentDate       DateTime?
  total             Float
  priceIyzico       Float
  discountCode      DiscountCode?     @relation(fields: [discountCodeId], references: [id])
  discountCodeId    String?
  user              User?             @relation(fields: [userId], references: [id])
  userId            String?
  address           Address           @relation(fields: [addressId], references: [id])
  addressId         String
  ip                String
  cardType          String?
  maskedCardNumber  String?
  cardFamily        String?
  cardAssociation   String?
  paymentType       PaymentType       @default(IYZICO)
  // Cancellation Fields
  isCancelled       Boolean           @default(false) // Siparişin iptal edilip edilmediği
  cancelReason      UserCancelReason? // İptal nedeni
  cancelProcessDate DateTime? // İptalin işleme alındığı tarih
  cancelPaymentId   String? // İyzico iptal işlem ID'si

  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  OrderItems               OrderItems[]
  BankTransferNotification BankTransferNotification[]
}

model OrderItems {
  id                   String            @id @default(cuid())
  order                Order             @relation(fields: [orderId], references: [id])
  orderId              String
  variant              Variant           @relation(fields: [variantId], references: [id])
  variantId            String
  quantity             Int
  price                Float
  iyzicoPrice          Float
  paymentTransactionId String?
  // Refund Fields
  isRefunded           Boolean           @default(false) // Ürünün iade edilip edilmediği
  refundReason         UserCancelReason? // Ürün bazında iade nedeni
  refundStatus         RefundStatus?     @default(NONE) // Ürün bazında iade durumu
  refundRequestDate    DateTime? // Ürün iade talep tarihi
  refundPaymentId      String? // İyzico ürün iade işlem ID'si
  refundAmount         Float? // İade edilen tutar

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
}

enum OrderStatus {
  PENDING // Sipariş beklemede
  PROCESSING // HAZIRLANIYOR
  SHIPPED // Kargoya verildi
  CANCELLED // İptal edildi
  COMPLETED // Tamamlandı
}

enum RefundStatus {
  NONE // İade talebi yok
  REQUESTED // İade talep edildi
  PROCESSING // İade işleniyor
  COMPLETED // İade tamamlandı
  REJECTED // İade reddedildi
}

model FavoriteVariants {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  variant   Variant   @relation(fields: [variantId], references: [id])
  variantId String
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  @@unique([userId, variantId])
  @@index([userId])
  @@index([variantId])
}

model NoReplyEmailSetting {
  id        String   @id @default(cuid())
  email     String
  host      String
  port      Int
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailTemplate {
  id          String            @id @default(cuid())
  type        EmailTemplateType @unique
  title       String?
  altText     String?
  buttonColor String?
  buttonText  String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

enum EmailTemplateType {
  ORDER_CANCELLED // Sipariş İptali: Müşterinin siparişi iptal edildiğinde gönderilir
  ORDER_CREATED // Sipariş Oluşturuldu: Yeni bir sipariş verildiğinde gönderilir
  ORDER_INVOICE // Sipariş Faturası: Sipariş faturası oluşturulduğunda gönderilir
  ORDER_DELIVERED // Sipariş Teslim Edildi: Sipariş müşteriye ulaştığında gönderilir
  ORDER_ACCEPTED // Sipariş Onaylandı: Sipariş onaylandığında gönderilir // NEW
  ORDER_REFUNDED // Sipariş İade Edildi: Sipariş bedeli iade edildiğinde gönderilir
  ORDER_REFUND_REQUESTED // İade Talebi: Müşteri iade talebinde bulunduğunda gönderilir
  ORDER_REFUND_REJECTED // İade Reddedildi: İade talebi reddedildiğinde gönderilir
  ORDER_BANKTRANSFER_CREATED // Havale/EFT Bilgileri girildiğinde gönderilir: Havale/EFT bilgileri gönderilir
  ORDER_BANKTRANSFER_ACCEPTED // Havale/EFT Onaylandı: Havale/EFT ödemesi onaylandığında gönderilir
  ORDER_BANKTRANSFER_REJECTED // Havale/EFT Reddedildi: Havale/EFT ödemesi reddedildiğinde gönderilir
  SHIPPING_CREATED // Kargo Oluşturuldu: Sipariş kargoya verildiğinde gönderilir
  SHIPPING_DELIVERED // Kargo Teslim Edildi: Kargo teslim edildiğinde gönderilir
  PASSWORD_RESET // Şifre Sıfırlama: Kullanıcı şifre sıfırlama talep ettiğinde gönderilir
  WELCOME_MESSAGE // Hoş Geldiniz Mesajı: Yeni üye olan kullanıcılara gönderilir
  OTHER // Diğer
}

model Blog {
  id              String  @id @default(cuid())
  active          Boolean @default(false)
  slug            String  @unique
  author          String
  blogTitle       String
  blogDescription String
  pageDescription String? //for SEO
  pageTitle       String? //for SEO
  Html            String  @db.Text
  image           Image?  @relation(fields: [imageId], references: [id])
  imageId         String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ECommerceAgreements {
  TERMS_OF_SERVICE
  PRIVACY_POLICY
  DISTANCE_SALES_AGREEMENT
  PERSONAL_DATA_PROTECTION
  CLARIFICATION_TEXT
  EXPLICIT_CONSENT
  MEMBERSHIP_AGREEMENT
  SECURE_SHOPPING
  RETURN_POLICY
  PAYMENT_TERMS
}

model Policies {
  id        String              @id @default(cuid())
  type      ECommerceAgreements @unique
  title     String?
  content   String              @db.Text
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

enum PaymentChannels {
  transfer // Havale/EFT // string
  iyzico // string
  tami
  paytr
}

enum OrderChangeType {
  minus
  plus
}

model PaymentMethods {
  id                      String           @id @default(cuid())
  type                    PaymentChannels  @unique
  title                   String
  description             String?
  isFunctioning           Boolean?
  iyzicoAPIKEY            String?
  iyzicoSECRETKEY         String?
  tamiMERCHANTNUMBER      String?
  tamiTERMİNALNUMBER     String?
  tamiAPISECRET           String?
  testMode                Boolean          @default(false)
  minAmount               Float?
  maxAmount               Float?
  orderChange             Float?
  orderChangeType         OrderChangeType?
  orderChangeDiscountType DiscountType?
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
}

model RichTextImageGallery {
  id        String   @id @default(cuid())
  url       String   @unique
  createdAt DateTime @default(now())
}

model BankTransferNotification {
  id          String @id @default(cuid())
  orderNumber String
  order       Order  @relation(fields: [orderNumber], references: [orderNumber])

  name                    String
  surname                 String
  transactionTime         String
  orderChange             Float?
  orderChangeType         OrderChangeType?
  orderChangeDiscountType DiscountType?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactUs {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  isReturn  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FaqSection {
  id              String           @id @default(cuid())
  title           String? // Section başlığı ekledim
  description     String? // Section açıklaması ekledim
  questions       FaqQuestion[] // İsim daha açıklayıcı
  image           Image?           @relation(fields: [imageId], references: [id])
  imageId         String?          @unique
  isActive        Boolean          @default(true) // Genel aktivasyon kontrolü
  displaySettings DisplaySettings? // Görünürlük ayarları için ayrı bir model
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt // Güncelleme tarihi ekledim
}

model FaqQuestion {
  id        String     @id @default(cuid())
  question  String
  answer    String     @db.Text // Uzun cevaplar için Text tipi
  isActive  Boolean    @default(true)
  order     Int        @default(0)
  section   FaqSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model DisplaySettings {
  id           String     @id @default(cuid())
  faqSection   FaqSection @relation(fields: [faqSectionId], references: [id], onDelete: Cascade)
  faqSectionId String     @unique
  isMainPage   Boolean    @default(false)
  isHeader     Boolean    @default(false)
  isFooter     Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}
